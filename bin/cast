#!/usr/bin/env php
<?php
$start = microtime(true);

if (PHP_SAPI !== 'cli') {
    echo 'warning: cast should be invoked via the CLI version of PHP; you are using the ' . PHP_SAPI . ' SAPI' . PHP_EOL;
}

$debug = (array_search('--cast.debug', $argv, true) !== false);

if (function_exists('ini_set')) {
    if ($debug) @ini_set('display_errors', 1);

    $memoryInBytes = function ($value)
    {
        $unit = strtolower(substr($value, -1, 1));
        $value = (int) $value;
        switch($unit) {
            case 'g':
                $value *= 1024;
            case 'm':
                $value *= 1024;
            case 'k':
                $value *= 1024;
        }
        return $value;
    };

    $memoryLimit = trim(ini_get('memory_limit'));
    // Increase memory_limit if it is lower than 512M
    if ($memoryLimit != -1 && $memoryInBytes($memoryLimit) < 512 * 1024 * 1024) {
        @ini_set('memory_limit', '512M');
    }
    unset($memoryInBytes, $memoryLimit);
}

try {
    if (!is_readable('config.core.php')) {
        throw new FileNotFoundException("cast could not find your MODX installation's config.core.php; this is required");
    }
    require_once 'config.core.php';
    require_once MODX_CORE_PATH . 'model/modx/modx.class.php';
    require_once __DIR__ . '/../src/autoload.php';

    $modx = modX::getInstance();
    $modx->initialize('mgr');
    $modx->setLogLevel(modX::LOG_LEVEL_INFO);
    $modx->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');

    $cast = new \Cast\Cast($modx);

    $controller = new \Cast\Controllers\CLIController();
    $response = $controller->handle($cast, $argv);
    echo ltrim($response, "\n");
    if ($debug) {
        printf("execution finished with exit code {$response->getCode()} in %2.4f seconds\n", microtime(true) - $start);
    }
} catch (\Exception $e) {
    echo "{$e->getMessage()}\n";
    if ($debug) {
        printf("execution failed in %2.4f seconds\n", microtime(true) - $start);
    }
}
